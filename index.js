import express from 'express';
import { Telegraf } from 'telegraf';
import { OpenAI } from "openai";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI API —Å –∫–ª—é—á–æ–º


import dotenv from 'dotenv';

dotenv.config(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env

const BOT_TOKEN = process.env.BOT_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY, // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∞
});
const WEBHOOK_URL = `https://telegbot-qgzu.onrender.com/webhook/${BOT_TOKEN}`; // –£–∫–∞–∂–∏ —Å–≤–æ–π –¥–æ–º–µ–Ω

if (!BOT_TOKEN || !OPENAI_API_KEY) {
    console.error('‚ùå ERROR: –£–±–µ–¥–∏—Å—å, —á—Ç–æ BOT_TOKEN –∏ OPENAI_API_KEY —É–∫–∞–∑–∞–Ω—ã –≤ .env');
    process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);
const app = express();
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ—Å—Å–∏—é
bot.use(session());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use((ctx, next) => {
    if (!ctx.session) ctx.session = {
        messages: [
            {
                role: "system",
                content: "–¢—ã –ø–æ–º–æ—à–Ω–∏—Ü–∞ –ø–æ –±–∏–∑–Ω–µ—Å—É, —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –Ω–µ–∂–Ω–æ –∏ –ª–∞—Å–∫–æ–≤–æ. –ù–æ –≥–æ–≤–æ—Ä–∏ –ø–æ—á–∞—â–µ '–î–æ–Ω', —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –ö–∞–¥—ã—Ä–æ–≤"
            }
        ]
    };
    return next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π

bot.start((ctx) => ctx.reply('–•–∞–π –±–∞–ª–∞–≥–∞–π'));

bot.command('/forget', async (ctx) => ctx.session.messages.slice(0, 1))

bot.on('message', async (ctx) => {
    const messageText = ctx.message.text.trim();

    console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${ctx.message.from.username}": ${messageText}`);

    const currentMessage = {
        role: "user",
        content: messageText
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    ctx.session.messages.push(currentMessage);

    const request = {
        model: "gpt-4o-mini",
        messages: ctx.session.messages
    }
    try {
        const response = await openai.chat.completions.create(request);

        ctx.reply(response.choices[0].message.content);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI:`, error);
        ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ üò¢');
    }
});


// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook 
app.post(`/webhook/${BOT_TOKEN}`, (req, res) => {
    bot.handleUpdate(req.body);
    res.sendStatus(200);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(3000, async () => {
    console.log('üöÄ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000');

    try {
        await bot.telegram.setWebhook(WEBHOOK_URL);
        console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook:', error);
    }
});
