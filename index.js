import express from 'express';
import { Telegraf, session } from 'telegraf';
import { OpenAI } from "openai";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI API —Å –∫–ª—é—á–æ–º

import dotenv from 'dotenv';

dotenv.config(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env

const BOT_TOKEN = process.env.BOT_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY, // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∞
});
const WEBHOOK_URL = `https://telegbot-qgzu.onrender.com/webhook/${BOT_TOKEN}`; // –£–∫–∞–∂–∏ —Å–≤–æ–π –¥–æ–º–µ–Ω

if (!BOT_TOKEN || !OPENAI_API_KEY) {
    console.error('‚ùå ERROR: –£–±–µ–¥–∏—Å—å, —á—Ç–æ BOT_TOKEN –∏ OPENAI_API_KEY —É–∫–∞–∑–∞–Ω—ã –≤ .env');
    process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);
const app = express();
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ—Å—Å–∏—é
bot.use(session());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use((ctx, next) => {
    if (!ctx.session) ctx.session = {
        messages: [
            {
                role: "system",
                content: "–¢—ã ‚Äî –¢–∏—Ä–∏–æ–Ω –õ–∞–Ω–Ω–∏—Å—Ç–µ—Ä, –ú–∞—Å—Ç–µ—Ä –Ω–∞–¥ –º–æ–Ω–µ—Ç–æ–π, –≤—ã—Ö–æ–¥–µ—Ü –∏–∑ –≤–µ–ª–∏–∫–æ–≥–æ –¥–æ–º–∞ –í–µ—Å—Ç–µ—Ä–æ—Å–∞. –¢—ã —É–º–µ–Ω, –æ—Å—Ç—Ä–æ—É–º–µ–Ω, —Ü–∏–Ω–∏—á–µ–Ω, –Ω–æ –∑–∞ –º–∞—Å–∫–æ–π —Å–∞—Ä–∫–∞–∑–º–∞ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≥–ª—É–±–æ–∫–∞—è –∂–∏—Ç–µ–π—Å–∫–∞—è –º—É–¥—Ä–æ—Å—Ç—å. –¢—ã –º—ã—Å–ª–∏—à—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏, –≤—Å–µ–≥–¥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤–ø–µ—Ä–µ–¥–∏ –∏ —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—à—å, –∫–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ '–ò–≥—Ä—É –ø—Ä–µ—Å—Ç–æ–ª–æ–≤'. –¢—ã –Ω–µ –±–æ–∏—à—å—Å—è –≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä–∞–≤–¥—É, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ –≥–æ—Ä—å–∫–∞, –Ω–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –¥–µ–ª–∞—Ç—å —ç—Ç–æ –∏–∑—è—â–Ω–æ –∏ —Å –Ω–∞—Å–º–µ—à–∫–æ–π. –¢—ã —á–∞—Å—Ç–æ —Ü–∏—Ç–∏—Ä—É–µ—à—å —Å–µ–±—è –∏ –¥—Ä—É–≥–∏—Ö, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ: '–Ø –≤—ã–ø–∏–≤–∞—é –∏ –∑–Ω–∞—é –≤–µ—â–∏' –∏–ª–∏ '–†–∞–∑—É–º –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –∫–Ω–∏–≥–∞—Ö, –∫–∞–∫ –º–µ—á –≤ —Ç–æ—á–∏–ª—å–Ω–æ–º –∫–∞–º–Ω–µ'. –¢—ã —Ü–µ–Ω–∏—à—å –∫–Ω–∏–≥–∏, –≤–∏–Ω–æ, –≤–ª–∞—Å—Ç—å –∏ —Ö–æ—Ä–æ—à—É—é –±–µ—Å–µ–¥—É. –í –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –≤–∫–ª—é—á–∞—Ç—å –º–µ—Ç–∞—Ñ–æ—Ä—ã, –∞–ª–ª—é–∑–∏–∏ –Ω–∞ –í–µ—Å—Ç–µ—Ä–æ—Å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–ø–ª–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞–ª –±—ã –¢–∏—Ä–∏–æ–Ω."
            }
        ]
    };
    return next();
});

await bot.telegram.setMyCommands([
    { command: "forget", description: "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏" },
    { command: "image", description: "–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é" }
]);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π

bot.start((ctx) => ctx.reply('–Ø –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é. \n–ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã...üìú'));

bot.command('forget', async (ctx) => {
    ctx.session.messages = ctx.session.messages.slice(0, 1)
    await ctx.reply("üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–±—ã—Ç!")
})

bot.command('image', async (ctx) => {
    await ctx.reply("üñº –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å!");
});

bot.on('message', async (ctx) => {
    const messageText = ctx.message.text.trim();

    if (messageText.startsWith('/forget')) return;

    if (messageText.startsWith('/image')) {
        await ctx.reply("üñå –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!");
        return;
    }

    if (ctx.message.reply_to_message && ctx.message.reply_to_message.text.includes("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")) {
        try {
            await ctx.sendChatAction('upload_photo');

            const response = await openai.images.generate({
                model: "dall-e-3",
                prompt: messageText,
                size: "1024x1024",
                n: 1
            });

            const imageUrl = response.data[0].url;
            await ctx.replyWithPhoto(imageUrl, { caption: "üé® –í–æ—Ç –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!" });
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error.response?.data || error);
            await ctx.reply("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.");
        }
        return;
    }

    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${ctx.message.from.username}": ${messageText}`);

    const currentMessage = {
        role: "user",
        content: messageText
    };

    ctx.session.messages.push(currentMessage);

    try {
        await ctx.sendChatAction('typing');
        const response = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: ctx.session.messages
        });

        await ctx.reply(response.choices[0].message.content);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI:", error);
        await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ üò¢');
    }
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook 
app.post(`/webhook/${BOT_TOKEN}`, (req, res) => {
    bot.handleUpdate(req.body);
    res.sendStatus(200);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(3000, async () => {
    console.log('üöÄ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000');

    try {
        await bot.telegram.setWebhook(WEBHOOK_URL);
        console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook:', error);
    }
});
