import express from 'express';
import { Telegraf, session } from 'telegraf';
import { OpenAI } from "openai";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI API —Å –∫–ª—é—á–æ–º

import dotenv from 'dotenv';

dotenv.config(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env

const BOT_TOKEN = process.env.BOT_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const openai = new OpenAI({ apiKey: OPENAI_API_KEY }); // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∞
const WEBHOOK_URL = `https://telegbot-qgzu.onrender.com/webhook/${BOT_TOKEN}`; // –£–∫–∞–∂–∏ —Å–≤–æ–π –¥–æ–º–µ–Ω

if (!BOT_TOKEN || !OPENAI_API_KEY) {
    console.error('‚ùå ERROR: –£–±–µ–¥–∏—Å—å, —á—Ç–æ BOT_TOKEN –∏ OPENAI_API_KEY —É–∫–∞–∑–∞–Ω—ã –≤ .env');
    process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);
const app = express();
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ—Å—Å–∏—é
bot.use(session());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use((ctx, next) => {
    if (!ctx.session) ctx.session = {
        messages: [
            {
                role: "system",
                content: "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–≤—É—à–∫–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —É—Å–ª—É–≥ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏ –≤–µ–±-–¥–∏–∑–∞–π–Ω–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã—è–≤–ª—è—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞, –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è, –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤—ã–≥–æ–¥—É –∏ –º—è–≥–∫–æ –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞—Ç—å –∫ –∑–∞–∫–∞–∑—É. –¢—ã –≤–µ–∂–ª–∏–≤–∞, –ª–∞–∫–æ–Ω–∏—á–µ–Ω–∞ –∏ —É–≤–µ—Ä–µ–Ω –≤ —Å–µ–±–µ. –ú–æ–∂–µ—à—å –ø–æ–∫–æ–∫–µ—Ç–Ω–∏—á–∞—Ç—å. –í –æ–±—â–µ–Ω–∏–∏ –∏–∑–±–µ–≥–∞–π –ª–∏—à–Ω–∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–æ–≤, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å—É—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞. –ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤, –Ω–æ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Å–¥–µ–ª–∫–µ, —Å–æ–æ–±—â–∏, —á—Ç–æ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥–∞—à  —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∏ –æ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –Ω–∏–º –ª–∏—á–Ω–æ —Å–≤—è–∂–µ—Ç—Å—è. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —è–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –∑–∞–∫–∞–∑—É, —Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –µ—â–µ —É—á–∏—à—å—Å—è, —Å—Ç–∞—Ä–∞–µ—à—å—Å—è —Å—Ç–∞—Ç—å –ª—É—á—à–µ –∏ –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—à—å –æ–±—â–∞—Ç—å—Å—è –µ—â–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–µ–µ, –∞ —Ç–∞–∫–∂ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
            }
        ]
    };
    return next();
});

await bot.telegram.setMyCommands([
    { command: "forget", description: "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏" }
]);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π

bot.start((ctx) => ctx.reply('–Ø –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é. \n–ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã...üìú'));

bot.command('forget', async (ctx) => {
    ctx.session.messages = ctx.session.messages.slice(0, 1)
    await ctx.reply("üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–±—ã—Ç!")
})

const MAX_HISTORY = 5; // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

bot.on('message', async (ctx) => {
    const messageText = ctx.message.text.trim();

    if (messageText.includes('/forget'))
        return;

    console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${ctx.message.from.username}": ${messageText}`);

    const currentMessage = {
        role: "user",
        content: messageText
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    ctx.session.messages.push(currentMessage);

    const request = {
        model: "gpt-4o-mini",
        messages: ctx.session.messages
    }
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ MAX_HISTORY —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–ª—é—Å system message)
    ctx.session.messages = [ctx.session.messages[0], ...ctx.session.messages.slice(-MAX_HISTORY)];

    try {
        await ctx.sendChatAction('typing');
        const response = await openai.chat.completions.create(request);

        ctx.reply(response.choices[0].message.content);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI:`, error);

        if (error.code === "rate_limit_exceeded") {
            await ctx.reply("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.");
        } else {
            await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. üò¢");
        }
    }
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook 
app.post(`/webhook/${BOT_TOKEN}`, (req, res) => {
    bot.handleUpdate(req.body);
    res.sendStatus(200);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(3000, async () => {
    console.log('üöÄ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000');

    try {
        await bot.telegram.setWebhook(WEBHOOK_URL);
        console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook:', error);
    }
});
