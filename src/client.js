import { Api, TelegramClient } from "telegram";
import { StringSession } from "telegram/sessions/index.js";
import { API_ID, API_HASH, SESSION_STRING } from "./config.js";
import input from "input"; // –î–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
import dotenv from 'dotenv';
import { bot } from './bot.js';

dotenv.config();

const session = new StringSession(SESSION_STRING);

export const client = new TelegramClient(session, API_ID, API_HASH, {
    connectionRetries: 5
});

async function startClient() {
    await client.start({
        phoneNumber: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "),
        password: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å 2FA): "),
        phoneCode: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: "),
        onError: (err) => console.error(err),
    });

    console.log("‚úÖ –õ–∏—á–Ω—ã–π Telegram-–∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω!");
    process.env.SESSION_STRING = client.session.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
    client.addEventHandler(async (event) => {
        if (!event.message || event.message.out) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

        const messageText = event.message.message;
        console.log(`üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${messageText}`);

        try {
            await bot.handleUpdate({
                update_id: Date.now(),
                message: {
                    message_id: event.message.id,
                    from: {
                        id: event.message.senderId.value,
                        is_bot: false,
                        first_name: "–í—ã",
                        username: "user",
                    },
                    chat: {
                        id: event.message.chatId,
                        type: "private"
                    },
                    date: Math.floor(Date.now() / 1000),
                    text: messageText
                }
            });

            console.log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:`, error);
        }
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
startClient().catch(console.error);
